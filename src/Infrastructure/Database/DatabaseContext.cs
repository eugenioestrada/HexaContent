using HexaContent.Core.Model;
using HexaContent.Infrastructure.Extension;
using Microsoft.EntityFrameworkCore;

namespace HexaContent.Infrastructure.Database;

/// <summary>
/// Represents the database context for the application, providing access to the Articles and Authors DbSets.
/// </summary>
public class DatabaseContext : DbContext
{
    /// <summary>
    /// Gets or sets the DbSet for articles.
    /// </summary>
    public DbSet<Article> Articles { get; set; }
	public DbSet<ArticleMeta> ArticleMeta { get; set; }
	public DbSet<ArticleSection> ArticleSections { get; set; }

	public DbSet<Section> Sections { get; set; }
	public DbSet<SectionMeta> SectionMeta { get; set; }

	/// <summary>
	/// Gets or sets the DbSet for authors.
	/// </summary>
	public DbSet<Author> Authors { get; set; }
	public DbSet<AuthorMeta> AuthorMeta { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for media.
    /// </summary>
    public DbSet<Media> Media { get; set; }

	/// <summary>
	/// Initializes a new instance of the <see cref="DatabaseContext"/> class.
	/// </summary>
	/// <param name="options">The options to be used by the DbContext.</param>
	public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options)
    {
	}

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.AddAutogenerated<Article, long>();
		modelBuilder.AddAutogenerated<Author, int>();
		modelBuilder.AddAutogenerated<Section, int>();
		modelBuilder.AddAutogenerated<ArticleSection, long>();
		modelBuilder.AddAutogenerated<ArticleMeta, long>();
		modelBuilder.AddAutogenerated<AuthorMeta, int>();
		modelBuilder.AddAutogenerated<SectionMeta, int>();
        modelBuilder.AddAutogenerated<Media, long>();

		modelBuilder.Entity<ArticleSection>()
			.HasKey(bc => new { bc.ArticleId, bc.SectionId });
		modelBuilder.Entity<ArticleSection>()
			.HasOne(bc => bc.Article)
			.WithMany(b => b.Sections)
			.HasForeignKey(bc => bc.ArticleId);
		modelBuilder.Entity<ArticleSection>()
			.HasOne(bc => bc.Section)
			.WithMany(c => c.Articles)
			.HasForeignKey(bc => bc.SectionId);

		modelBuilder.Entity<ArticleMeta>()
			.HasKey(bc => new { bc.ObjectId, bc.Key});
		modelBuilder.Entity<ArticleMeta>()
			.HasOne(bc => bc.Object)
			.WithMany(b => b.Meta)
			.HasForeignKey(bc => bc.ObjectId);

		modelBuilder.Entity<AuthorMeta>()
			.HasKey(bc => new { bc.ObjectId, bc.Key });
		modelBuilder.Entity<AuthorMeta>()
			.HasOne(bc => bc.Object)
			.WithMany(b => b.Meta)
			.HasForeignKey(bc => bc.ObjectId);

		modelBuilder.Entity<SectionMeta>()
			.HasKey(bc => new { bc.ObjectId, bc.Key });
		modelBuilder.Entity<SectionMeta>()
			.HasOne(bc => bc.Object)
			.WithMany(b => b.Meta)
			.HasForeignKey(bc => bc.ObjectId);

        modelBuilder.Entity<Article>()
            .HasOne(a => a.FeaturedMedia)
            .WithMany()
            .HasForeignKey(a => a.FeaturedMediaId)
            .OnDelete(DeleteBehavior.SetNull);
	}
}
