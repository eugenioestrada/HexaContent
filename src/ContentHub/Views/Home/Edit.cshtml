@model HexaContent.ContentHub.Models.EditArticleModel

@{
    ViewData["Title"] = "Edit Article";
}

<script src="https://cdn.jsdelivr.net/npm/@@editorjs/editorjs@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@@editorjs/header@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@@editorjs/list@2"></script>
<script src="https://cdn.jsdelivr.net/npm/@@editorjs/quote@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@@editorjs/table@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@@editorjs/embed@latest"></script>

<div class="editor">
    <form asp-action="Update" method="post">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Title" />
        <input id="content-input" type="hidden" asp-for="Content" />

        <div>
            <span class="edit-title" contenteditable="true" data-input-sync="Title">
                @Model.Title
            </span>
        </div>

        <div id="editorjs">
        </div>

        <script>
            const contentInput = document.getElementById("content-input");

            let data = null;

            try {
                data = JSON.parse(contentInput.value);
            } catch (error) {
                data = {};
            }

            const editor = new EditorJS({
                holder: 'editorjs',
                tools: {
                    header: {
                        class: Header,
                        inlineToolbar : true
                    },
                    list: {
                        class: EditorjsList,
                        inlineToolbar: true,
                        config: {
                            defaultStyle: 'unordered'
                        },
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: true,
                        shortcut: 'CMD+SHIFT+O',
                        config: {
                            quotePlaceholder: 'Enter a quote',
                            captionPlaceholder: 'Quote\'s author',
                        },
                    },
                    table: Table,
                    embed: {
                        class: Embed,
                        config: {
                            services: {
                                youtube: true,
                                coub: true
                            }
                        }
                    },
                },
                data: data
            });
        </script>

        <div>
            <input type="hidden" asp-for="AuthorId" />
        </div>
    </form>
</div>

@section Actions
{
    <button onclick="submit()">Save</button>
}

@section Aside {
    <div class="editor-meta">
        <select asp-for="AuthorId" asp-items="@(new SelectList(Model.Authors, "Id", "Name"))">
            <option value="">Select an author</option>
        </select>

        <select>
            <option>Section 1</option>
            <option selected>Section 2</option>
            <option>Section 3</option>
        </select>

        <div>
            <label asp-for="CreatedAt"></label>
            <input asp-for="CreatedAt" type="datetime" readonly />
        </div>

        <div>
            <label asp-for="UpdatedAt"></label>
            <input asp-for="UpdatedAt" type="datetime" readonly />
        </div>
    </div>
}

<script>
    const config = {
        subtree: true,
        attributes: true,
        // childList: true,
        characterData: true,
        characterDataOldValue: true
    };

    // Callback function to execute when mutations are observed
    const callback = (mutationList, observer) => {
        for (const mutation of mutationList) {
            console.log(mutation)
            if (mutation.target.parentNode != null) {
                let node = mutation.target.parentNode;
                if (typeof node.dataset.inputSync !== 'undefined') {
                    let selector = `input[type='hidden'][name='${node.dataset.inputSync}']`;
                    let hiddenInput = document.querySelector(selector);
                    hiddenInput.value = node.innerText;
                }
            }
        }
    };

    // Create an observer instance linked to the callback function
    const observer = new MutationObserver(callback);

    const nodes = document.querySelectorAll("main .editor *[contenteditable='true'][data-input-sync]");
    nodes.forEach(function(node) {
        observer.observe(node, config)
        node.addEventListener("paste", (event) => {
            var content = event.clipboardData.getData('text/plain');
            document.execCommand('insertText', false, content.trim());
            event.preventDefault();
            return false;
        });
        node.addEventListener("keypress", (event) => {
            return event.which != 13;
        });
    });

    function submit() {
        editor.save().then((outputData) => {
            contentInput.value = JSON.stringify(outputData);
            document.querySelector(".editor form").submit();
        });
    }
</script>
